-- MySQL Script generated by MySQL Workbench
-- Wed 11 Apr 2018 10:07:38 AM EDT
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='TRADITIONAL,ALLOW_INVALID_DATES';

-- -----------------------------------------------------
-- Schema mmeds_db
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `mmeds` DEFAULT CHARACTER SET utf8 ;
USE mmeds ;

CREATE TABLE user (
    user_id int NOT NULL AUTO_INCREMENT PRIMARY KEY,
    username varchar(100),
    password varchar(64), -- this should be a hash, not a clear-text
    salt varchar(10)
);

-- -----------------------------------------------------
-- Table `mmeds`.`Study`
-- -----------------------------------------------------
CREATE TABLE Study (
    idStudy INT NOT NULL PRIMARY KEY,
    Lab_idLab INT NOT NULL,
    Experiment VARCHAR(45) NULL DEFAULT NULL,
    user_id int REFERENCES user (user_id)
);


CREATE TABLE security_token (
    security_token_id int NOT NULL AUTO_INCREMENT PRIMARY KEY,
    username varchar(100),
    security_token varchar(100)
);

CREATE TABLE session (
    connection_id int NOT NULL PRIMARY KEY,
    username varchar(100)
);


DELIMITER //
CREATE FUNCTION set_connection_auth (v_user VARCHAR(100), v_security_token VARCHAR(100))
RETURNS BOOLEAN
NOT DETERMINISTIC
MODIFIES SQL DATA
SQL SECURITY DEFINER
BEGIN
    SELECT COUNT(*) INTO @v_token_count
    FROM security_token
    WHERE username = SESSION_USER() AND security_token = v_security_token;

    IF @v_token_count < 1 THEN
        RETURN false;
    END IF;
    INSERT INTO session (connection_id, username) VALUES (CONNECTION_ID(), v_user);
    RETURN true;
END //

CREATE FUNCTION unset_connection_auth (v_security_token VARCHAR(100))
RETURNS BOOLEAN
NOT DETERMINISTIC
MODIFIES SQL DATA
SQL SECURITY DEFINER
BEGIN
    DELETE FROM session WHERE connection_id = CONNECTION_ID();
    RETURN true;
END //

CREATE FUNCTION owner_check (v_owner_user_id int)
RETURNS BOOLEAN
NOT DETERMINISTIC
READS SQL DATA
SQL SECURITY INVOKER
BEGIN
    SELECT u.user_id INTO @v_current_user_id
    FROM session s
    JOIN user u
    ON u.username = s.username
    WHERE s.connection_id = CONNECTION_ID();
    IF @v_current_user_id = v_owner_user_id THEN
        RETURN true;
    ELSE
        RETURN false;
    END IF;
END //
DELIMITER ;


CREATE
SQL SECURITY DEFINER
VIEW protected_study AS
SELECT cc.* FROM Study cc WHERE owner_check(cc.user_id)
WITH CHECK OPTION;
