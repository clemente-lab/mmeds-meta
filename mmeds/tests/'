from unittest import TestCase
import mmeds.config as fig
import pandas as pd
from subprocess import run, CalledProcessError
import unittest


from pathlib import Path
from mmeds.util import make_pheniqs_config, strip_error_barcodes, setup_environment
from mmeds.logging import Logger

TESTING = True
unittest.TestLoader.sortTestMethodsUsing = None

class DemultiplexTests(TestCase):
    """ Tests of scripts """

    @classmethod
    def setUpClass(self):
        """ Set up tests """
        self.mapping = fig.TEST_MAPPING_DUAL
        self.for_reads = fig.TEST_READS_DUAL
        self.rev_reads = fig.TEST_REV_READS_DUAL
        self.for_barcodes = fig.TEST_BARCODES_DUAL
        self.rev_barcodes = fig.TEST_REV_BARCODES_DUAL
        self.tmp_dir = Path('/tmp/script_test')
        self.out = self.tmp_dir / 'pheniqs_config_test.json'
        self.out_dir = self.tmp_dir / 'pheniqs_out/'
        self.pheniqs_dir = fig.TEST_PHENIQS_DIR
        self.strip_dir = self.tmp_dir / 'stripped_out/'

    def test_pheniqs(self):
        """ Test making a pheniqs configuration .json file """
        out_s = make_pheniqs_config(
            self.for_reads,
            self.rev_reads,
            self.for_barcodes,
            self.rev_barcodes,
            self.mapping,
            self.out_dir
        )
        self.tmp_dir.mkdir(exist_ok=True)
        self.out_dir.mkdir(exist_ok=True)
        self.out.touch()
        self.out.write_text(out_s)

        assert self.out.exists()


        import pudb; pudb.set_trace()
        new_env = setup_environment('pheniqs')

        cmd = [f'pheniqs mux --config {self.out}']
        try:
            run(cmd, capture_output=True, env=new_env, check=True)
        except CalledProcessError as e:
            Logger.debug(e)
            print(e.output)

    def test_strip_error_barcodes(self):
        """ Test stripping errors from demuxed fastq.gz files """
        map_df = pd.read_csv(Path(self.mapping), sep='\t', header=[0], na_filter=False)
        map_hash = {}

        for i in range(len(map_df['#SampleID'])):
            if i > 0:
                map_hash[map_df['#SampleID'][i]] = \
                    (
                        map_df['BarcodeSequence'][i],
                        map_df['BarcodeSequenceR'][i]
                    )

        self.tmp_dir.mkdir(exist_ok=True)
        self.strip_dir.mkdir(exist_ok=True)
        strip_error_barcodes(1, map_hash, self.pheniqs_dir, self.strip_dir)
        p_test = self.strip_dir / '{}_S1_L001_R1_001.fastq.gz'.format(map_df['#SampleID'][1])
        assert p_test.exists()

    def test_demultiplex_validation(self):
        """  """
        import pudb; pudb.set_trace()
        new_env = setup_environment('qiime/1.9.1')
# gunzip data/240_16_CTCGACTTATCGTACG_L001_R1_001.fastq.gz
#sed -n '1~4s/^@/>/p;2~4p' data/240_16_CTCGACTTATCGTACG_L001_R1_001.fastq > data/240_16.fasta
#
        cmd = ['validate_demultiplexed_fasta.py', '-b', '-a',
               '-i', '/home/matt/mmeds/Qiime2_validate_demutliplex/data/240_16_L001_R1_001.fasta',
               '-o', '/home/matt/mmeds/Qiime2_validate_demutliplex/validate_output',
               '-m', '/home/matt/mmeds/Qiime3_validate_demutliplex/qiime_mapping_file_test.tsv']
        try:
            run(cmd, capture_output=True, env=new_env, check=True)
        except CalledProcessError as e:
            Logger.debug(e)
            print(e.output)
            raise e
