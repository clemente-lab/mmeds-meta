from mmeds.server import MMEDSserver
from time import sleep, time
from collections import defaultdict
from pathlib import Path
from tidylib import tidy_document
from tempfile import gettempdir

import mmeds.config as fig
import mmeds.secrets as sec
import mmeds.error as err
from mmeds.authentication import add_user, remove_user
from mmeds.util import insert_error, insert_html, load_html, log, recieve_email, insert_warning, send_email
from mmeds.spawn import Watcher
from multiprocessing import current_process, Queue, Pipe

import cherrypy as cp
from cherrypy.test import helper
from mmeds.log import MMEDSLog


testing = True
q = Queue()
pipe_ends = Pipe()
pipe = pipe_ends[0]
watcher = Watcher(q, pipe_ends[1], current_process(), testing)
watcher.start()
server = MMEDSserver(watcher, q, testing)
logger = MMEDSLog('debug').logger


def check_page(page):
    """ Checks that no errors were generated by the html """
    document, errors = tidy_document(page)
    all_errors = errors.split('\n')
    for error in all_errors:
        # Make sure there are only warnings
        assert 'error' not in error


class TestServer(helper.CPWebCase):

    server_code = 'server_code_' + fig.get_salt(10)
    # Create a unique user id from the current time
    server_user = fig.SERVER_USER + fig.get_salt(10)  # str(int(time()))
    access_code = None
    lab_user = 'lab_user_' + str(int(time()))
    tp = None

    def assertBody(self, check_body):
        """
        Override this assert for logging purposes
        Write both pages to a tempfile for easy comparison
        """
        bad_page = Path(gettempdir()) / 'bad_page.html'
        bad_page.touch()
        bad_page.write_bytes(self.body)

        good_page = Path(gettempdir()) / 'good_page.html'
        good_page.touch()
        if isinstance(check_body, str):
            good_page.write_text(check_body)
        else:
            good_page.write_bytes(check_body)
        super().assertBody(check_body)

    @staticmethod
    def setup_server():
        cp.tree.mount(server)
        test_config = defaultdict(dict)
        test_config['global']['tools.sessions.on'] = True
        test_config['global']['tools.sessions.name'] = 'cp_session'
        cp.config.update(test_config)

    def test_a_setup(self):
        log('===== Test Server Start =====')
        add_user(self.lab_user, sec.TEST_PASS, fig.TEST_EMAIL, 1, True)

    def test_aa_index(self):
        self.getPage('/index')
        self.assertStatus('200 OK')
        self.assertHeader('Content-Type', 'text/html;charset=utf-8')
        page_body = self.body.decode('utf-8')
        check_page(page_body)

    def test_ba_sign_up(self):
        logger.debug('Test C')
        self.not_logged_in()
        logger.debug('not_logged_in')
        self.sign_up_fail()
        logger.debug('sign_up')
        self.sign_up_success()

    def test_bc_login(self):

        self.login_fail_password()
        logger.debug('login_fail_password')
        self.login_fail_username()
        logger.debug('login_fail_username')
        self.login()
        logger.debug('login')
        self.logout()
        logger.debug('logout')

    def test_bd_reset_password(self):
        logger.debug('change_password')
        self.tp = self.reset_password()
        self.login(True)
        self.change_password()
        self.logout()

    def test_e_animal_upload(self):
        return
        self.login()
        self.upload_animal_metadata()
        self.upload_otu()
        self.logout()

    def test_d_upload(self):
        return
        self.login()
        self.upload_metadata()
        self.upload_data()
        self.modify_upload()
        self.download_page_fail()
        self.download_block()
        self.download()
        self.convert()
        self.lab_download()
        self.user_download()
        self.logout()

    def test_e_otu_upload(self):
        return
        self.login()
        self.upload_otu()
        self.logout()

    def test_f_lefse_upload(self):
        return
        self.login()
        self.upload_lefse()
        self.logout()

    def test_g_dual_upload(self):
        return
        self.login()
        self.upload_dualBarcode_metadata()

    def test_y_query(self):
        return
        self.login()
        self.execute_invalid_query()
        self.execute_protected_query()
        self.execute_query()

    def test_z_cleanup(self):
        remove_user(self.server_user, testing=testing)
        remove_user(self.lab_user, testing=testing)
        # Send an email at the end to ensure there aren't issues with
        # accessing the correct email in future test runs
        send_email(fig.TEST_EMAIL, 'tester', 'error', testing=testing)

    ####################
    #  Authentication  #
    ####################

    def not_logged_in(self):
        """ Check that trying to upload while not logged in takes you to the homepage """
        self.getPage('/index')
        self.assertStatus('200 OK')

        home_page = self.body

        self.getPage('/upload/upload_page')

        self.assertBody(home_page)

    def sign_up_fail(self):
        """ Check a unsuccessful sign in """
        # Check the sign up input page
        self.getPage('/auth/register_account')
        self.assertStatus('200 OK')

        addr = '/auth/sign_up?username={}&email={}&password1={}&password2={}'

        # Test signup with an invalid username
        faddr = addr.format('public', fig.TEST_EMAIL, sec.TEST_PASS, sec.TEST_PASS)
        self.getPage(faddr)
        self.assertStatus('200 OK')
        bad_page = server.format_html('auth_sign_up_page', error='Username is invalid.')
        self.assertBody(bad_page)

        # Test signup with an invalid password
        self.getPage(addr.format(self.server_user, fig.TEST_EMAIL, sec.TEST_PASS, sec.TEST_PASS + 'xx'))
        self.assertStatus('200 OK')
        bad_page = server.format_html('auth_sign_up_page', error='Passwords do not match.')
        self.assertBody(bad_page)

        logger.debug('continuing sign up')

    def sign_up_success(self):
        """ Check a successful sign in """
        addr = '/auth/sign_up?username={}&email={}&password1={}&password2={}'

        # Test successful signup
        self.getPage(addr.format(self.server_user, fig.TEST_EMAIL, sec.TEST_PASS, sec.TEST_PASS))
        self.assertStatus('200 OK')
        good_page = server.format_html('login', success='Account created successfully!')
        self.assertBody(good_page)

    def login(self, alt=False):
        """ When alt is True use alternate password """
        account_log = Path(gettempdir()) / 'account_log.txt'
        if alt:
            account_log.write_text('{}\t{}\t{}'.format(self.server_user, self.tp, alt))
            self.getPage('/login?username={}&password={}'.format(self.server_user, self.tp))
        else:
            account_log.write_text('{}\t{}\t{}'.format(self.server_user, sec.TEST_PASS, alt))
            self.getPage('/login?username={}&password={}'.format(self.server_user, sec.TEST_PASS))
        self.assertStatus('200 OK')
        page = server.format_html('home', user=self.server_user, dir='.')
        self.assertBody(page)

    def logout(self):
        self.getPage('/login?username={}&password={}'.format(self.server_user, sec.TEST_PASS))
        self.getPage('/auth/logout', headers=self.cookies)
        page = server.format_html('login')
        self.assertBody(page)

    def login_fail_password(self):
        self.getPage('/login?username={}&password={}'.format(self.server_user, sec.TEST_PASS + 'garbage'))
        self.assertStatus('200 OK')
        page = server.format_html('login', error=err.InvalidLoginError().message)
        self.assertBody(page)

    def login_fail_username(self):
        self.getPage('/login?username={}&password={}'.format(self.server_user + 'garbage', sec.TEST_PASS))
        self.assertStatus('200 OK')
        page = server.format_html('login', error=err.InvalidLoginError().message)
        self.assertBody(page)

    def reset_password(self):
        logger.debug('reset_password')
        self.getPage('/auth/submit_password_recovery?username={}&email={}'.format(self.server_user,
                                                                                  fig.TEST_EMAIL + 'dfa'))
        self.assertStatus('200 OK')
        fail_page = server.format_html('login', error='No account exists with the provided username and email.')
        self.assertBody(fail_page)

        self.getPage('/auth/submit_password_recovery?username={}&email={}'.format(self.server_user, fig.TEST_EMAIL))
        self.assertStatus('200 OK')
        pass_page = server.format_html('login', success='A new password has been sent to your email.')
        self.assertBody(pass_page)

        mail = recieve_email(self.server_user, 'reset', 'Your password has been reset.')
        new_pass = mail.split('password is:')[1].splitlines()[1].strip()
        return new_pass

    def change_password(self):
        logger.debug('change_password')
        self.getPage('/login?username={}&password={}'.format(self.server_user, self.tp))
        self.assertStatus('200 OK')
        self.getPage('/auth/input_password', self.cookies)
        self.assertStatus('200 OK')
        temp_pass_bad = 'thi$1sT'
        self.getPage('/auth/change_password?password0={old}&password1={new}&password2={new}'.format(old=self.tp,
                                                                                                    new=temp_pass_bad),
                     self.cookies)
        self.assertStatus('200 OK')
        fail_page = server.format_html('auth_change_password',
                                       user=self.server_user,
                                       account_selected='w3-text-blue',
                                       home_selected='',
                                       error=['Passwords must be longer than 10 characters.'])

        self.assertBody(fail_page)
        self.getPage('/auth/change_password?password0={old}&password1={new}&password2={new}'.format(old=self.tp,
                                                                                                    new=sec.TEST_PASS),
                     self.cookies)
        self.assertStatus('200 OK')
        pass_page = server.format_html('auth_change_password',
                                       user=self.server_user,
                                       account_selected='w3-text-blue',
                                       home_selected='',
                                       success='Your password was successfully changed.')
        self.assertBody(pass_page)

        self.getPage('/login?username={}&password={}'.format(self.server_user, sec.TEST_PASS))
        self.assertStatus('200 OK')

    ############
    #  Access  #
    ############

    def upload_files(self, file_handles, file_paths, file_types):
        """ Helper method to setup headers and body for uploading a file """
        boundry = fig.get_salt(10)
        zipped = zip(file_handles, file_paths, file_types)
        b = b''
        for file_handle, file_path, file_type in zipped:
            # Byte strings
            b += str.encode('--{}\r\n'.format(boundry) +
                            'Content-Disposition: form-data; name="{}"; '.format(file_handle))
            # IF the file_type is '' treat it as a string param
            if file_type == '':
                b += str.encode('\r\n\r\n{}\r\n'.format(file_path))
            # Otherwise load the file
            else:
                b += str.encode('filename="{}"\r\n'.format(Path(file_path).name) +
                                'Content-Type: {}\r\n\r\n'.format(file_type))
                if not file_path == '':
                    b += Path(file_path).read_bytes() + str.encode('\r\n')
            b + str.encode('\r\n')
        b += str.encode('--{}--\r\n'.format(boundry))

        filesize = len(b)
        h = [('Content-Type', 'multipart/form-data; boundary={}'.format(boundry)),
             ('Content-Length', str(filesize)),
             ('Connection', 'keep-alive')]
        return h, b

    def upload_otu(self):
        self.getPage('/upload/upload_page', self.cookies)
        self.assertStatus('200 OK')
        # Check an invalid metadata filetype
        self.getPage('/upload/upload_metadata?uploadType=sparcc&studyName=Test_OTU&subjectType=human', self.cookies)
        self.assertStatus('200 OK')

        headers, body = self.upload_files(['myMetaData'], [fig.TEST_SUBJECT_ALT], ['text/tab-seperated-values'])
        self.getPage('/upload/validate_metadata?barcodes_type=None', headers + self.cookies, 'POST', body)
        self.assertStatus('200 OK')

        headers, body = self.upload_files(['myMetaData'], [fig.TEST_SPECIMEN_ALT], ['text/tab-seperated-values'])
        self.getPage('/upload/validate_metadata?barcodes_type=other', headers + self.cookies, 'POST', body)
        self.assertStatus('200 OK')
        page_body = self.body
        document, errors = tidy_document(page_body)
        # Assert no errors, warnings are okay
        for warn in errors:
            assert not ('error' in warn or 'Error' in warn)

        self.getPage('/upload/upload_data', self.cookies)
        self.assertStatus('200 OK')

        headers, body = self.upload_files(['otu_table'], [fig.TEST_OTU], ['text/tab-seperated-values'])
        self.getPage('/analysis/process_data', headers + self.cookies, 'POST', body)
        self.assertStatus('200 OK')

        assert recieve_email(self.server_user, 'upload',
                             'user {} uploaded data for the {}'.format(self.server_user, 'Test_OTU'))

    def upload_animal_metadata(self):
        self.getPage('/upload/upload_page', self.cookies)
        self.assertStatus('200 OK')
        # Check an invalid metadata filetype
        self.getPage('/upload/upload_metadata?uploadType=sparcc&studyName=Test_Animal_OTU&subjectType=animal',
                     self.cookies)
        self.assertStatus('200 OK')

        headers, body = self.upload_files(['myMetaData'], [fig.TEST_ANIMAL_SUBJECT], ['text/tab-seperated-values'])
        self.getPage('/upload/validate_metadata?barcodes_type=None', headers + self.cookies, 'POST', body)
        self.assertStatus('200 OK')

        headers, body = self.upload_files(['myMetaData'], [fig.TEST_SPECIMEN], ['text/tab-seperated-values'])
        self.getPage('/upload/validate_metadata?barcodes_type=other', headers + self.cookies, 'POST', body)
        self.assertStatus('200 OK')
        page_body = self.body
        document, errors = tidy_document(page_body)
        # Assert no errors, warnings are okay
        for warn in errors:
            assert not ('error' in warn or 'Error' in warn)

        self.getPage('/upload/upload_data', self.cookies)
        self.assertStatus('200 OK')

        headers, body = self.upload_files(['otu_table'], [fig.TEST_OTU], ['text/tab-seperated-values'])
        self.getPage('/analysis/process_data', headers + self.cookies, 'POST', body)
        self.assertStatus('200 OK')

        # Search arguments for retrieving emails with access codes
        assert recieve_email(self.server_user, 'upload',
                             'user {} uploaded data for the {}'.format(self.server_user, 'Test_Animal_OTU'))

    def upload_lefse(self):
        self.getPage('/upload/upload_page', self.cookies)
        self.assertStatus('200 OK')
        self.getPage('/upload/upload_metadata?uploadType=lefse&studyName=Test_Lefse&subjectType=human', self.cookies)
        self.assertStatus('200 OK')

        headers, body = self.upload_files(['myMetaData'], [fig.TEST_SUBJECT_ALT], ['text/tab-seperated-values'])
        self.getPage('/upload/validate_metadata?barcodes_type=None', headers + self.cookies, 'POST', body)
        self.assertStatus('200 OK')

        headers, body = self.upload_files(['myMetaData'], [fig.TEST_SPECIMEN_ALT], ['text/tab-seperated-values'])
        self.getPage('/upload/validate_metadata?barcodes_type=other', headers + self.cookies, 'POST', body)
        self.assertStatus('200 OK')
        page_body = self.body
        document, errors = tidy_document(page_body)
        # Assert no errors, warnings are okay
        for warn in errors:
            assert not ('error' in warn or 'Error' in warn)

        self.getPage('/upload/upload_data', self.cookies)
        self.assertStatus('200 OK')

        headers, body = self.upload_files(['lefse_table'], [fig.TEST_LEFSE], ['text/tab-seperated-values'])
        self.getPage('/analysis/process_data', headers + self.cookies, 'POST', body)
        self.assertStatus('200 OK')

        # Search arguments for retrieving emails with access codes
        assert recieve_email(self.server_user, 'upload',
                             'user {} uploaded data for the {}'.format(self.server_user, 'Test_Lefse'))

    def upload_dualBarcode_metadata(self):
        self.getPage('/upload/upload_page', self.cookies)
        self.assertStatus('200 OK')
        self.getPage('/upload/upload_metadata?uploadType=qiime&studyName=Test_DualBarcodes&subjectType=human',
                     self.cookies)
        self.assertStatus('200 OK')

        headers, body = self.upload_files(['myMetaData'], [fig.TEST_SUBJECT_SHORT], ['text/tab-seperated-values'])
        self.getPage('/upload/validate_metadata?barcodes_type=None', headers + self.cookies, 'POST', body)
        self.assertStatus('200 OK')

        headers, body = self.upload_files(['myMetaData'], [fig.TEST_SPECIMEN_SHORT_DUAL], ['text/tab-seperated-values'])
        self.getPage('/upload/validate_metadata?barcodes_type=dual', headers + self.cookies, 'POST', body)
        self.assertStatus('200 OK')
        page_body = self.body
        documents, errors = tidy_document(page_body)
        # Assert no errors, warnings are okay
        for warn in errors:
            assert not ('error' in warn or 'Error' in warn)

        self.getPage('/upload/upload_data', self.cookies)
        self.assertStatus('200 OK')
        headers, body = self.upload_files(['for_reads', 'rev_reads',
                                           'for_barcodes', 'rev_barcodes'],
                                          [fig.TEST_READS, fig.TEST_REV_READS,
                                           fig.TEST_BARCODES, fig.TEST_BARCODES],
                                          ['application/gzip', 'application/gzip',
                                           'application/gzip', 'application/gzip'])
        self.getPage('/analysis/process_data', headers + self.cookies, 'POST', body)
        self.assertStatus('200 OK')

        assert recieve_email(self.server_user, 'upload',
                             'user {} uploaded data for the {}'.format(self.server_user, 'Test_DualBarcodes'))

    def upload_metadata(self):
        # Check the page for uploading metadata
        self.getPage('/upload/upload_page', self.cookies)
        self.assertStatus('200 OK')
        self.getPage('/upload/upload_metadata?uploadType=qiime&studyName=Test_Server&subjectType=human', self.cookies)
        self.assertStatus('200 OK')
        # Check an invalid metadata filetype
        headers, body = self.upload_files(['myMetaData'], [fig.TEST_GZ], ['application/gzip'])
        self.getPage('/upload/validate_metadata?barcodes_type=None', headers + self.cookies, 'POST', body)
        self.assertStatus('200 OK')
        page = load_html(fig.HTML_DIR / 'upload_metadata_file.html',
                         title='Upload Metadata',
                         user=self.server_user,
                         metadata_type='subject')
        err = 'gz is not a valid filetype.'
        page = insert_error(page, 22, err)
        self.assertBody(page)
        log('Checked invalid filetype')

        # Check a subject metadata file that errors
        headers, body = self.upload_files(['myMetaData'], [fig.TEST_SUBJECT_ERROR], ['text/tab-seperated-values'])
        self.getPage('/upload/validate_metadata?barcodes_type=None', headers + self.cookies, 'POST', body)
        self.assertStatus('200 OK')
        page_body = self.body
        document, errors = tidy_document(page_body)
        # Assert no errors, warnings are okay
        for warn in errors:
            assert not ('error' in warn or 'Error' in warn)

        log('Checked metadata that errors')

        # Check a subject metadata file that produces warnings
        headers, body = self.upload_files(['myMetaData'], [fig.TEST_SUBJECT_WARN], ['text/tab-seperated-values'])
        self.getPage('/upload/validate_metadata?barcodes_type=None', headers + self.cookies, 'POST', body)
        self.assertStatus('200 OK')
        page = load_html(fig.HTML_DIR / 'upload_metadata_warning.html',
                         title='Warnings',
                         user=self.server_user,
                         next_page='../upload/retry_upload')

        warning = '-1\t17\tCategorical Data Warning: Potential categorical data detected. Value Protocol90' +\
            ' may be in error, only 1 found.'
        page = insert_warning(page, 22, warning)
        self.assertBody(page)
        log('Checked metadata that warns')

        # Check a subject metadata file that has no issues
        headers, body = self.upload_files(['myMetaData'], [fig.TEST_SUBJECT], ['text/tab-seperated-values'])
        self.getPage('/upload/validate_metadata?barcodes_type=None', headers + self.cookies, 'POST', body)
        self.assertStatus('200 OK')

        # Check a specimen metadata file that errors
        headers, body = self.upload_files(['myMetaData'], [fig.TEST_SPECIMEN_ERROR], ['text/tab-seperated-values'])
        self.getPage('/upload/validate_metadata?barcodes_type=sol', headers + self.cookies, 'POST', body)

        self.assertStatus('200 OK')
        page_body = self.body
        document, errors = tidy_document(page_body)
        # Assert no errors, warnings are okay
        for warn in errors:
            assert not ('error' in warn or 'Error' in warn)

        log('Checked metadata that errors')

        # Check a subject metadata file that produces warnings
        headers, body = self.upload_files(['myMetaData'], [fig.TEST_SPECIMEN_WARN], ['text/tab-seperated-values'])
        self.getPage('/upload/validate_metadata?barcodes_type=single', headers + self.cookies, 'POST', body)
        self.assertStatus('200 OK')
        page = load_html(fig.HTML_DIR / 'upload_metadata_warning.html',
                         title='Warnings',
                         user=self.server_user,
                         next_page='../upload/upload_data')

        warning = '-1\t41\tCategorical Data Warning: Potential categorical data detected. Value Protocol90' +\
            ' may be in error, only 1 found.'
        page = insert_warning(page, 22, warning)
        self.assertBody(page)
        log('Checked metadata that warns')

        headers, body = self.upload_files(['myMetaData'], [fig.TEST_SPECIMEN], ['text/tab-seperated-values'])
        self.getPage('/upload/validate_metadata?barcodes_type=single', headers + self.cookies, 'POST', body)
        self.assertStatus('200 OK')
        page = load_html(fig.HTML_DIR / 'upload_data_files.html', title='Upload Data', user=self.server_user)
        self.assertBody(page)
        log('Checked a metadata file with no problems')

    def upload_data(self):
        self.getPage('/upload/upload_data', self.cookies)
        self.assertStatus('200 OK')
        headers, body = self.upload_files(['for_reads', 'rev_reads', 'barcodes', 'reads_type'],
                                          [fig.TEST_READS, '', fig.TEST_BARCODES, 'single_end'],
                                          ['application/gzip', 'application/octet-stream',
                                           'application/gzip', ''])
        self.getPage('/analysis/process_data', headers + self.cookies, 'POST', body)
        self.assertStatus('200 OK')

        mail = recieve_email(self.server_user, 'upload',
                             'user {} uploaded data for the {}'.format(self.server_user, 'Test_Server'))
        self.access_code = mail.split('access code:')[1].splitlines()[1]

    def modify_upload(self):
        headers, body = self.upload_files(['myData'], [fig.TEST_READS], ['application/gzip'])
        self.getPage('/upload/modify_upload?data_type=for_reads&access_code=badcode',
                     headers + self.cookies, 'POST', body)
        self.assertStatus('200 OK')
        orig_page = load_html(fig.HTML_DIR / 'upload_select_page.html', title='Upload Type', user=self.server_user)
        err_page = insert_error(orig_page, 22, err.MissingUploadError().message)
        self.assertBody(err_page)
        self.getPage('/upload/modify_upload?data_type=for_reads&access_code={}'.format(self.access_code),
                     headers + self.cookies, 'POST', body)
        page = load_html(fig.HTML_DIR / 'welcome.html', title='Welcome to MMEDS', user=self.server_user)
        page = insert_html(page, 22, 'Upload modification successful')
        self.assertStatus('200 OK')
        self.assertBody(page)

    def download_page_fail(self):
        self.getPage("/auth/login?username={}&password={}".format(self.server_user, sec.TEST_PASS))
        self.getPage("/download/download_page?access_code={}".format(self.server_code + 'garbage'),
                     headers=self.cookies)
        self.assertStatus('200 OK')
        page = load_html(fig.HTML_DIR / 'welcome.html', title='Welcome to MMEDS', user=self.server_user)
        page = insert_error(page, 22, err.MissingUploadError().message)
        self.assertBody(page)
        self.getPage('/auth/logout', headers=self.cookies)

    def download_block(self):
        # Login
        self.getPage("/auth/login?username={}&password={}".format(self.server_user, sec.TEST_PASS))
        # Start test analysis
        address = '/analysis/run_analysis?access_code={}&tool_type={}&analysis_type={}&config='
        tool, analysis = fig.TEST_TOOL.split('-')
        self.getPage(address.format(self.access_code, tool, analysis), headers=self.cookies)

        # Wait for analysis to finish
        sleep(int(fig.TEST_TOOL.split('-')[-1]))

        # Try to access again
        self.getPage("/download/download_page?access_code={}".format(self.access_code), headers=self.cookies)

        page = load_html(fig.HTML_DIR / 'download_select_file.html',
                         user=self.server_user, title='Select Download')
        for i, f in enumerate(sorted(fig.TEST_FILES)):
            page = insert_html(page, 24 + i, '<option value="{}">{}</option>'.format(f, f))

        self.assertStatus('200 OK')
        self.assertBody(page)
        self.getPage('/logout', headers=self.cookies)

    def download(self):
        for download in fig.TEST_FILES:
            address = '/download/select_download?download={}'.format(download)
            self.getPage(address, headers=self.cookies)
            self.assertStatus('200 OK')

    def convert(self):
        headers, body = self.upload_files(['myMetaData'],
                                          [fig.TEST_METADATA_SHORTEST],
                                          ['text/tab-seperated-values'])
        addr = '/upload/convert_metadata?convertTo=mixs&unitCol=&skipRows='
        self.getPage(addr, headers + self.cookies, 'POST', body)
        self.assertStatus('200 OK')

    def lab_download(self):
        # Login
        self.getPage("/auth/logout", headers=self.cookies)
        self.assertStatus('200 OK')
        self.getPage("/auth/login?username={}&password={}".format(self.lab_user, sec.TEST_PASS))
        self.assertStatus('200 OK')
        self.getPage("/download/select_study", headers=self.cookies)
        self.assertStatus('200 OK')
        self.getPage("/download/download_study?study_code={}".format(self.access_code), headers=self.cookies)
        self.assertStatus('200 OK')
        metadata_path = self.body.decode('utf-8').split('\n')[34].split('"')[1]
        self.getPage("/download/download_filepath?file_path={}".format(metadata_path), headers=self.cookies)
        self.assertStatus('200 OK')

    def user_download(self):
        # Login
        self.getPage("/auth/logout", headers=self.cookies)
        self.assertStatus('200 OK')
        self.getPage("/auth/login?username={}&password={}".format(self.server_user, sec.TEST_PASS))
        self.assertStatus('200 OK')
        self.getPage("/download/download_study?study_code={}".format(self.access_code), headers=self.cookies)
        self.assertStatus('200 OK')
        page = self.body.decode('utf-8')
        metadata_path = page.split('\n')[34].split('"')[1]
        self.getPage("/download/download_filepath?file_path={}".format(metadata_path), headers=self.cookies)
        self.assertStatus('200 OK')

    ###############
    # SQL queries #
    ###############

    def execute_invalid_query(self):
        self.getPage('/analysis/query_page', headers=self.cookies)
        self.assertStatus('200 OK')
        self.getPage('/analysis/execute_query?query={}'.format('asdf'), self.cookies, 'POST')
        self.assertStatus('200 OK')

    def execute_protected_query(self):
        self.getPage('/analysis/query_page', headers=self.cookies)
        self.assertStatus('200 OK')
        self.getPage('/analysis/execute_query?query={}'.format('Describe+Subjects'), self.cookies, 'POST')
        self.assertStatus('200 OK')

    def execute_query(self):
        self.getPage('/analysis/query_page', headers=self.cookies)
        self.assertStatus('200 OK')
        self.getPage('/analysis/execute_query?query={}'.format('Select+*+from+Subjects'), self.cookies, 'POST')
        self.assertStatus('200 OK')
