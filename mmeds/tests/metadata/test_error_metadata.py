from unittest import TestCase
import mmeds.validate as valid
import mmeds.config as fig
import sys
import traceback as tb
from pathlib import Path

# Set as True to see formatted error output
VERBOSE = False

class ErrorTests(TestCase):
    def test_a_generated_error_files(self):
        """
        Test all the error files generated by scripts/generate_test_tsv.py
        """
        
        top_dir = Path('/home/adamcantor22//mmeds-meta/test_files/validation_files/')
        sub_directories = ['blank_column_tests', 'na_column_tests', 'other_column_tests', 'number_column_tests', 'date_column_tests']

        # Get all sub directories to analyze
        total_directories = []
        for directory in sub_directories:
            total_directories.append(top_dir / directory / 'subject')
            total_directories.append(top_dir / directory / 'specimen')
            # total_directories.append(top_dir / 'misc_tests')

        good_subjects = valid.validate_mapping_file(fig.TEST_SUBJECT_SHORT, 'Short_Study', 'subject', None, 'human')[2]
        for directory in total_directories:
            for test_file in directory.glob('*.tsv'):
                exceptions_covered = True

                # Generate headers for each file output
                if VERBOSE:
                    length = len(test_file.name)
                    bar_size = 70 
                    bar = ''
                    count = int((bar_size - length) / 2)
                    for i in range(count):
                        bar += '='
                    bar += ' ' + test_file.name + ' '
                    for i in range(count):
                        bar += '='
                    print(bar) 
        
                # Test subject files
                if test_file.parent.name == 'subject': 
                    try:
                        errors, warnings, subjects = valid.validate_mapping_file(test_file, 'Good_Study22', 'subject', None, 'human')
                        if VERBOSE:
                            print('For', test_file.name, '\b:')
                            if len(errors) > 0:
                                print('\nErrors:')
                                for err in errors:
                                    print(err)
                            else:
                                print('\nNo Errors Found')
                            if len(warnings) > 0:
                                print('\nWarnings:')
                                for warn in warnings:
                                    print(warn)
                            else:
                                print('\nNo Warnings Found')
                            print('\n') 
                    except Exception as ex:
                        print('Exception', ex, 'of type', type(ex))
                        exceptions_covered = False
                        trace = tb.StackSummary.extract(tb.walk_tb(sys.exc_info()[2]))
                        for tr in trace:
                            print(tr)

                else:
                    try:
                        errors, warnings, subjects = valid.validate_mapping_file(test_file, 'Short_Study', 'specimen', good_subjects, 'human')
                        if VERBOSE:
                            print('For', test_file.name, '\b:')
                            if len(errors) > 0:
                                print('\nErrors:')
                                for err in errors:
                                    print(err)
                            else:
                                print('\nNo Errors Found')
                            if len(warnings) > 0:
                                print('\nWarnings:')
                                for warn in warnings:
                                    print(warn)
                            else:
                                print('\nNo Warnings Found')
                            print('\n')
                    except Exception as ex:
                        print('Exception', ex, 'of type', type(ex))
                        exceptions_covered = False
                        trace = tb.StackSummary.extract(tb.walk_tb(sys.exc_info()[2]))
                        for tr in trace:
                            print(tr)
                assert exceptions_covered

